/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package transaction;

import hms.CursorGlassPane;
import hms.HMSHome;
import java.awt.Component;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Vector;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;
import support.Library;
import support.OurDateChooser;
import support.PickList;

/**
 *
 * @author Bhaumik
 */
public class SearchPatient extends javax.swing.JInternalFrame {

    Library lb = new Library();
    PickList cityPickList = null;
    PickList areaPickList = null;
    PickList acPickList = null;
    Connection dataConnection = hms.HMS101.connMpAdmin;
    Component oldGlass = null;
    CursorGlassPane glassPane = new CursorGlassPane();
    DefaultTableModel dtm = null;
    int type = -1;
    JDialog jd = null;
    String opd_no = "";
    OPDBillGeneration opd = null;
    VaccineDispose vcd = null;

    /**
     * Creates new form SearchPatient
     */
    public SearchPatient() {
        initComponents();
        dtm = (DefaultTableModel) jTable1.getModel();
        setPickList();
        jchkAreaItemStateChanged(null);
        jchkCityItemStateChanged(null);
        jchkConsulatantItemStateChanged(null);
        jchkDateItemStateChanged(null);
        jchkNameItemStateChanged(null);
        jchkRefByItemStateChanged(null);
    }

    public SearchPatient(int type, JDialog jd) {
        initComponents();
        this.type = type;
        this.jd = jd;
        dtm = (DefaultTableModel) jTable1.getModel();
        setPickList();
        jchkAreaItemStateChanged(null);
        jchkCityItemStateChanged(null);
        jchkConsulatantItemStateChanged(null);
        jchkDateItemStateChanged(null);
        jchkNameItemStateChanged(null);
        jchkRefByItemStateChanged(null);
        jbtnClose.setVisible(false);
    }

    public void setOpdBill(OPDBillGeneration opd) {
        this.opd = opd;
    }

    public void setOpdBill(VaccineDispose opd) {
        this.vcd = opd;
    }

    private void setPickList() {
        cityPickList = new PickList(dataConnection);
        areaPickList = new PickList(dataConnection);
        acPickList = new PickList(dataConnection);

        cityPickList.setLayer(getLayeredPane());
        cityPickList.setPickListComponent(jtxtCity);
        cityPickList.setReturnComponent(new JTextField[]{jtxtCity});
        cityPickList.setNextComponent(jtxtArea);
        cityPickList.setAllowBlank(true);

        areaPickList.setLayer(getLayeredPane());
        areaPickList.setPickListComponent(jtxtArea);
        areaPickList.setReturnComponent(new JTextField[]{jtxtArea});
        areaPickList.setNextComponent(jbtnSearch);
        areaPickList.setAllowBlank(true);

        acPickList.setLayer(this.getLayeredPane());

    }

    private void addGlassPane() {
        oldGlass = this.getGlassPane();
        this.setGlassPane(glassPane);
        this.getGlassPane().setVisible(true);
    }

    private void removeGlassPane() {
        this.getGlassPane().setVisible(false);
        this.setGlassPane(oldGlass);
    }

    @Override
    public void dispose() {
        try {
            jd.dispose();
        } catch (Exception ex) {
            lb.printToLogFile("Exception at dispose at city master", ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jtxtOPDNumber = new javax.swing.JTextField();
        jtxtContact = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jchkDate = new javax.swing.JCheckBox();
        jtxtFromDate = new javax.swing.JTextField();
        jBillDateBtn = new javax.swing.JButton();
        jtxtToDate = new javax.swing.JTextField();
        jBillDateBtn1 = new javax.swing.JButton();
        jchkArea = new javax.swing.JCheckBox();
        jtxtArea = new javax.swing.JTextField();
        jchkCity = new javax.swing.JCheckBox();
        jtxtCity = new javax.swing.JTextField();
        jtxtRefBy = new javax.swing.JTextField();
        jtxtConsBy = new javax.swing.JTextField();
        jtxtConsAlias = new javax.swing.JTextField();
        jtxtRefAlias = new javax.swing.JTextField();
        jchkRefBy = new javax.swing.JCheckBox();
        jchkConsulatant = new javax.swing.JCheckBox();
        jchkName = new javax.swing.JCheckBox();
        jtxtName = new javax.swing.JTextField();
        jbtnSearch = new javax.swing.JButton();
        jbtnClose = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setText("OPD Number");

        jtxtOPDNumber.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxtOPDNumberKeyPressed(evt);
            }
        });

        jtxtContact.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxtContactKeyPressed(evt);
            }
        });

        jLabel2.setText("Contact NUmber");

        jchkDate.setMnemonic('D');
        jchkDate.setText("Visit Date");
        jchkDate.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jchkDateItemStateChanged(evt);
            }
        });

        jtxtFromDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtxtFromDateFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtxtFromDateFocusLost(evt);
            }
        });
        jtxtFromDate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxtFromDateKeyPressed(evt);
            }
        });

        jBillDateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBillDateBtnActionPerformed(evt);
            }
        });

        jtxtToDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtxtToDateFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtxtToDateFocusLost(evt);
            }
        });
        jtxtToDate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxtToDateKeyPressed(evt);
            }
        });

        jBillDateBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBillDateBtn1ActionPerformed(evt);
            }
        });

        jchkArea.setMnemonic('A');
        jchkArea.setText("Area");
        jchkArea.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jchkAreaItemStateChanged(evt);
            }
        });

        jtxtArea.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtxtAreaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtxtAreaFocusLost(evt);
            }
        });
        jtxtArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxtAreaKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtxtAreaKeyReleased(evt);
            }
        });

        jchkCity.setMnemonic('C');
        jchkCity.setText("City");
        jchkCity.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jchkCityItemStateChanged(evt);
            }
        });

        jtxtCity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtxtCityFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtxtCityFocusLost(evt);
            }
        });
        jtxtCity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxtCityKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtxtCityKeyReleased(evt);
            }
        });

        jtxtRefBy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtxtRefByFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtxtRefByFocusLost(evt);
            }
        });
        jtxtRefBy.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxtRefByKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtxtRefByKeyReleased(evt);
            }
        });

        jtxtConsBy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jtxtConsByFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtxtConsByFocusLost(evt);
            }
        });
        jtxtConsBy.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtxtConsByKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtxtConsByKeyReleased(evt);
            }
        });

        jchkRefBy.setMnemonic('R');
        jchkRefBy.setText("Ref By");
        jchkRefBy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jchkRefByItemStateChanged(evt);
            }
        });

        jchkConsulatant.setMnemonic('T');
        jchkConsulatant.setText("Consoltant");
        jchkConsulatant.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jchkConsulatantItemStateChanged(evt);
            }
        });

        jchkName.setMnemonic('N');
        jchkName.setText("By Name");
        jchkName.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jchkNameItemStateChanged(evt);
            }
        });

        jbtnSearch.setMnemonic('S');
        jbtnSearch.setText("Search");
        jbtnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnSearchActionPerformed(evt);
            }
        });

        jbtnClose.setMnemonic('C');
        jbtnClose.setText("Close");
        jbtnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jchkRefBy, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jchkCity, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jchkDate)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jtxtFromDate, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBillDateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtxtToDate, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBillDateBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jtxtOPDNumber)
                    .addComponent(jtxtCity)
                    .addComponent(jtxtRefBy))
                .addGap(1, 1, 1)
                .addComponent(jtxtRefAlias, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                    .addComponent(jchkName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jchkArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jchkConsulatant, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jtxtName, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jtxtArea, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jtxtConsBy, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)
                    .addComponent(jtxtContact))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jtxtConsAlias, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jbtnSearch, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jbtnClose, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel1, jchkCity, jchkDate, jchkRefBy});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtxtOPDNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jtxtContact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jbtnSearch)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jchkDate)
                    .addComponent(jtxtFromDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBillDateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtxtToDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBillDateBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jchkName)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jtxtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jbtnClose)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jchkCity)
                    .addComponent(jtxtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jchkArea)
                    .addComponent(jtxtArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jchkRefBy)
                    .addComponent(jtxtRefBy, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jchkConsulatant)
                    .addComponent(jtxtRefAlias, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jtxtConsBy, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jtxtConsAlias, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel1, jtxtOPDNumber});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel2, jtxtContact});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jchkArea, jtxtArea});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jchkName, jtxtName});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jchkCity, jtxtCity});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jchkConsulatant, jchkRefBy, jtxtConsAlias, jtxtConsBy, jtxtRefAlias, jtxtRefBy});

        jPanel2.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient Name", "Case No", "Contact", "Address"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
        }

        jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtxtFromDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtxtFromDateFocusGained
        // TODO add your handling code here:
        jtxtFromDate.selectAll();
    }//GEN-LAST:event_jtxtFromDateFocusGained

    private void jtxtFromDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtxtFromDateFocusLost
        lb.checkDate(jtxtFromDate);
    }//GEN-LAST:event_jtxtFromDateFocusLost

    private void jtxtFromDateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtFromDateKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (lb.isBlank(jtxtFromDate)) {
                lb.setDateChooserPropertyInit(jtxtFromDate);
            }
            evt.consume();
            if (lb.checkDate2(jtxtFromDate)) {
                jtxtToDate.requestFocusInWindow();
            } else {
                JOptionPane.showMessageDialog(this, "Invalid Date", "", JOptionPane.WARNING_MESSAGE);
                jtxtFromDate.requestFocusInWindow();
            }
        }
    }//GEN-LAST:event_jtxtFromDateKeyPressed

    private void jBillDateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBillDateBtnActionPerformed
        // TODO add your handling code here:
        OurDateChooser odc = new OurDateChooser();
        odc.setnextFocus(jtxtFromDate);
        odc.setFormat("dd/MM/yyyy");
        JPanel jp = new JPanel();
        this.add(jp);
        jp.setBounds(jtxtFromDate.getX(), jtxtFromDate.getY() + 125, jtxtFromDate.getX() + odc.getWidth(), jtxtFromDate.getY() + odc.getHeight());
        odc.setLocation(0, 0);
        odc.showDialog(jp, "Select Date");
    }//GEN-LAST:event_jBillDateBtnActionPerformed

    private void jtxtToDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtxtToDateFocusGained
        // TODO add your handling code here:
        lb.selectAll(evt);
    }//GEN-LAST:event_jtxtToDateFocusGained

    private void jtxtToDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtxtToDateFocusLost
        // TODO add your hndling code here:
        lb.checkDate(jtxtToDate);
    }//GEN-LAST:event_jtxtToDateFocusLost

    private void jtxtToDateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtToDateKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            evt.consume();
            if (lb.isBlank(jtxtToDate)) {
                lb.setDateChooserPropertyInit(jtxtToDate);
            }
            if (lb.checkDate2(jtxtToDate)) {
                jbtnSearch.requestFocusInWindow();
            } else {
                JOptionPane.showMessageDialog(this, "Invalid Date", "", JOptionPane.WARNING_MESSAGE);
                jtxtToDate.requestFocusInWindow();
            }
        }
    }//GEN-LAST:event_jtxtToDateKeyPressed

    private void jBillDateBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBillDateBtn1ActionPerformed
        // TODO add your handling code here
        OurDateChooser odc = new OurDateChooser();
        odc.setnextFocus(jtxtToDate);
        odc.setFormat("dd/MM/yyyy");
        JPanel jp = new JPanel();
        this.add(jp);
        jp.setBounds(jtxtToDate.getX(), jtxtToDate.getY() + 125, jtxtToDate.getX() + odc.getWidth(), jtxtToDate.getY() + odc.getHeight());
        odc.setLocation(0, 0);
        odc.showDialog(jp, "Select Date");
    }//GEN-LAST:event_jBillDateBtn1ActionPerformed

    private void jtxtAreaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtxtAreaFocusGained
        // TODO add your handling code here:
        lb.selectAll(evt);
    }//GEN-LAST:event_jtxtAreaFocusGained

    private void jtxtAreaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtxtAreaFocusLost
        // TODO add your handling code here:
        lb.toUpper(evt);
    }//GEN-LAST:event_jtxtAreaFocusLost

    private void jtxtAreaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtAreaKeyPressed
        // TODO add your handling code here:
        areaPickList.setLocation(jtxtArea.getX() + jPanel1.getX(), jtxtArea.getY() + jtxtArea.getHeight() + jPanel1.getY());
        areaPickList.pickListKeyPress(evt);
    }//GEN-LAST:event_jtxtAreaKeyPressed

    private void jtxtAreaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtAreaKeyReleased
        // TODO add your handling code here:
        try {
            PreparedStatement psLocal = dataConnection.prepareStatement("select area_name as \"Area Name\" from areamst where (area_name) like '" + jtxtArea.getText().toUpperCase() + "%'");
            areaPickList.setPreparedStatement(psLocal);
            areaPickList.pickListKeyRelease(evt);
        } catch (Exception ex) {
            lb.printToLogFile("Error at jtxtAreaNameKeyReleased in sales man", ex);
        }
    }//GEN-LAST:event_jtxtAreaKeyReleased

    private void jtxtCityFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtxtCityFocusGained
        // TODO add your handling code here:
        lb.selectAll(evt);
    }//GEN-LAST:event_jtxtCityFocusGained

    private void jtxtCityFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtxtCityFocusLost
        // TODO add your handling code here:
        lb.toUpper(evt);
    }//GEN-LAST:event_jtxtCityFocusLost

    private void jtxtCityKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtCityKeyPressed
        // TODO add your handling code here:
        cityPickList.setLocation(jtxtCity.getX() + jPanel1.getX(), jtxtCity.getY() + jtxtCity.getHeight() + jPanel1.getY());
        cityPickList.pickListKeyPress(evt);
    }//GEN-LAST:event_jtxtCityKeyPressed

    private void jtxtCityKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtCityKeyReleased
        // TODO add your handling code here:
        try {
            PreparedStatement psLocal = dataConnection.prepareStatement("select (city_name) as \"City\",(state_name) as \"State\",(country_name) as \"Country\" \n"
                    + "from citymst c,countrymst ck,statemst s "
                    + "where s.state_cd=c.state_cd and ck.country_cd=s.country_cd "
                    + "and (c.city_name) like  '" + jtxtCity.getText().toUpperCase() + "%'");
            cityPickList.setPreparedStatement(psLocal);
            cityPickList.pickListKeyRelease(evt);
        } catch (Exception ex) {
            lb.printToLogFile("Error at txtcityKeyReleased in Patient master", ex);
        }
    }//GEN-LAST:event_jtxtCityKeyReleased

    private void jtxtRefByFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtxtRefByFocusGained
        // TODO add your handling code here:
        lb.selectAll(evt);
    }//GEN-LAST:event_jtxtRefByFocusGained

    private void jtxtRefByFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtxtRefByFocusLost
        // TODO add your handling code here:
        lb.toUpper(evt);
    }//GEN-LAST:event_jtxtRefByFocusLost

    private void jtxtRefByKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtRefByKeyPressed
        acPickList.setPickListComponent(jtxtRefBy);
        acPickList.setLocation(jtxtRefBy.getX() + jPanel1.getX(), jtxtRefBy.getY() + jtxtRefBy.getHeight() + jPanel1.getY());
        acPickList.setNextComponent(jtxtConsBy);
        acPickList.setReturnComponent(new JTextField[]{jtxtRefBy, jtxtRefAlias});
        acPickList.pickListKeyPress(evt);
    }//GEN-LAST:event_jtxtRefByKeyPressed

    private void jtxtRefByKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtRefByKeyReleased
        // TODO add your handling code here:
        try {
            PreparedStatement psLocal = dataConnection.prepareStatement("SELECT ac_name as name,ac_alias as code FROM acntmst "
                    + " WHERE ac_cd IN (SELECT ac_cd FROM doctormaster) and  "
                    + " ac_name like  '" + jtxtRefBy.getText().toUpperCase() + "%'");
            acPickList.setPreparedStatement(psLocal);
            acPickList.setFirstAssociation(new int[]{0, 1});
            acPickList.setSecondAssociation(new int[]{0, 1});
            acPickList.pickListKeyRelease(evt);
        } catch (Exception ex) {
            lb.printToLogFile("Error at txtcityKeyReleased in account master", ex);
        }
    }//GEN-LAST:event_jtxtRefByKeyReleased

    private void jtxtConsByFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtxtConsByFocusGained
        // TODO add your handling code here:
        lb.selectAll(evt);
    }//GEN-LAST:event_jtxtConsByFocusGained

    private void jtxtConsByFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtxtConsByFocusLost
        // TODO add your handling code here:
        lb.toUpper(evt);
    }//GEN-LAST:event_jtxtConsByFocusLost

    private void jtxtConsByKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtConsByKeyPressed
        // TODO add your handling code here:
        acPickList.setPickListComponent(jtxtConsBy);
        acPickList.setLocation(jtxtConsBy.getX() + jPanel1.getX(), jtxtConsBy.getY() + jtxtConsBy.getHeight() + jPanel1.getY());
        acPickList.setNextComponent(jbtnSearch);
        acPickList.setReturnComponent(new JTextField[]{jtxtConsBy, jtxtConsAlias});
        acPickList.pickListKeyPress(evt);
    }//GEN-LAST:event_jtxtConsByKeyPressed

    private void jtxtConsByKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtConsByKeyReleased
        // TODO add your handling code here:
        try {
            PreparedStatement psLocal = dataConnection.prepareStatement("SELECT ac_name as name,ac_alias as code FROM acntmst "
                    + " WHERE ac_cd IN (SELECT ac_cd FROM doctormaster) and  "
                    + " ac_name like  '" + jtxtConsBy.getText().toUpperCase() + "%'");
            acPickList.setPreparedStatement(psLocal);
            acPickList.setFirstAssociation(new int[]{0, 1});
            acPickList.setSecondAssociation(new int[]{0, 1});
            acPickList.pickListKeyRelease(evt);
        } catch (Exception ex) {
            lb.printToLogFile("Error at txtcityKeyReleased in account master", ex);
        }
    }//GEN-LAST:event_jtxtConsByKeyReleased

    private void jchkDateItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jchkDateItemStateChanged
        // TODO add your handling code here:
        jtxtFromDate.setEnabled(jchkDate.isSelected());
        jBillDateBtn.setEnabled(jchkDate.isSelected());
        jtxtToDate.setEnabled(jchkDate.isSelected());
        jBillDateBtn1.setEnabled(jchkDate.isSelected());
        if (jchkDate.isSelected()) {
            jtxtFromDate.requestFocusInWindow();
        }
    }//GEN-LAST:event_jchkDateItemStateChanged

    private void jchkCityItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jchkCityItemStateChanged
        // TODO add your handling code here:
        jtxtCity.setEnabled(jchkCity.isSelected());
        if (jchkCity.isSelected()) {
            jtxtCity.requestFocusInWindow();
        }
    }//GEN-LAST:event_jchkCityItemStateChanged

    private void jchkRefByItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jchkRefByItemStateChanged
        // TODO add your handling code here:
        jtxtRefAlias.setEnabled(jchkRefBy.isSelected());
        jtxtRefBy.setEnabled(jchkRefBy.isSelected());
        if (jchkRefBy.isSelected()) {
            jtxtRefBy.requestFocusInWindow();
        }
    }//GEN-LAST:event_jchkRefByItemStateChanged

    private void jchkNameItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jchkNameItemStateChanged
        // TODO add your handling code here:
        jtxtName.setEnabled(jchkName.isSelected());
        if (jchkName.isSelected()) {
            jtxtName.requestFocusInWindow();
        }
    }//GEN-LAST:event_jchkNameItemStateChanged

    private void jchkAreaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jchkAreaItemStateChanged
        // TODO add your handling code here:
        jtxtArea.setEnabled(jchkArea.isSelected());
        if (jchkArea.isSelected()) {
            jtxtArea.requestFocusInWindow();
        }
    }//GEN-LAST:event_jchkAreaItemStateChanged

    private void jchkConsulatantItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jchkConsulatantItemStateChanged
        // TODO add your handling code here:
        jtxtConsAlias.setEnabled(jchkConsulatant.isSelected());
        jtxtConsBy.setEnabled(jchkConsulatant.isSelected());
        if (jchkConsulatant.isSelected()) {
            jtxtConsBy.requestFocusInWindow();
        }
    }//GEN-LAST:event_jchkConsulatantItemStateChanged

    private void jbtnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnSearchActionPerformed
        // TODO add your handling code here:
        SwingWorker workerForjbtnGenerate = new SwingWorker() {
            @Override
            protected Object doInBackground() throws Exception {

                try {
                    addGlassPane();
                    String sql = "SELECT p.opd_no,p.pt_name,p1.mobile,p1.address FROM patientmst p LEFT JOIN patientinfomst p1  ON p.opd_no=p1.opd_no "
                            + " where p.opd_no  like '%%' ";
                    if (jchkDate.isSelected()) {
                        sql += " and p.first_visit_date between('" + lb.ConvertDateFormetForDB(jtxtFromDate.getText()) + "','" + lb.ConvertDateFormetForDB(jtxtToDate.getText()) + "')";
                    }
                    if (jchkName.isSelected()) {
                        sql += " and p.pt_name like '%" + jtxtName.getText().toUpperCase() + "%'";
                    }
                    if (jchkRefBy.isSelected()) {
                        sql += " and p.ref_by = " + lb.getAcCode(jtxtRefAlias.getText(), "AC");
                    }
                    if (jchkConsulatant.isSelected()) {
                        sql += " and p.con_doc = " + lb.getAcCode(jtxtConsAlias.getText(), "AC");
                    }
                    if (jchkCity.isSelected()) {
                        sql += " and p1.city_cd=" + lb.getCityCd(jtxtCity.getText().toUpperCase(), "C");
                    }
                    if (jchkArea.isSelected()) {
                        sql += " and p1.area_cd=" + lb.getAreaCd(jtxtArea.getText().toUpperCase(), "C");
                    }
                    PreparedStatement pstLocal = dataConnection.prepareStatement(sql);
                    ResultSet rsLocal = pstLocal.executeQuery();
                    dtm.setRowCount(0);
                    while (rsLocal.next()) {
                        Vector row = new Vector();
                        row.add(rsLocal.getString("pt_name"));
                        row.add(rsLocal.getString("opd_no"));
                        row.add(rsLocal.getString("mobile"));
                        row.add(rsLocal.getString("address"));
                        dtm.addRow(row);
                    }
                } catch (Exception ex) {
                    lb.printToLogFile("Exception at saveVoucher at save area master", ex);
                } finally {
                    removeGlassPane();
                }
                return null;
            }
        };
        workerForjbtnGenerate.execute();
    }//GEN-LAST:event_jbtnSearchActionPerformed

    private void jbtnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCloseActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jbtnCloseActionPerformed

    private void jtxtOPDNumberKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtOPDNumberKeyPressed
        // TODO add your handling code here:
        if (lb.isEnter(evt)) {
            SwingWorker workerForjbtnGenerate = new SwingWorker() {
                @Override
                protected Object doInBackground() throws Exception {

                    try {
                        addGlassPane();
                        String sql = "SELECT p.opd_no,p.pt_name,p1.mobile,p1.address FROM patientmst p LEFT JOIN patientinfomst p1  ON p.opd_no=p1.opd_no "
                                + " where p.opd_no  = '" + jtxtOPDNumber.getText() + "' ";
                        PreparedStatement pstLocal = dataConnection.prepareStatement(sql);
                        ResultSet rsLocal = pstLocal.executeQuery();
                        dtm.setRowCount(0);
                        while (rsLocal.next()) {
                            Vector row = new Vector();
                            row.add(rsLocal.getString("pt_name"));
                            row.add(rsLocal.getString("opd_no"));
                            row.add(rsLocal.getString("mobile"));
                            row.add(rsLocal.getString("address"));
                            dtm.addRow(row);
                        }
                    } catch (Exception ex) {
                        lb.printToLogFile("Exception at saveVoucher at save area master", ex);
                    } finally {
                        removeGlassPane();
                    }
                    return null;
                }
            };
            workerForjbtnGenerate.execute();
        }
    }//GEN-LAST:event_jtxtOPDNumberKeyPressed

    private void jtxtContactKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtContactKeyPressed
        // TODO add your handling code here:
        if (lb.isEnter(evt)) {
            SwingWorker workerForjbtnGenerate = new SwingWorker() {
                @Override
                protected Object doInBackground() throws Exception {

                    try {
                        addGlassPane();
                        String sql = "SELECT p.opd_no,p.pt_name,p1.mobile,p1.address FROM patientmst p LEFT JOIN patientinfomst p1  ON p.opd_no=p1.opd_no "
                                + " where p1.mobile  like '" + jtxtContact.getText() + "%' ";
                        PreparedStatement pstLocal = dataConnection.prepareStatement(sql);
                        ResultSet rsLocal = pstLocal.executeQuery();
                        dtm.setRowCount(0);
                        while (rsLocal.next()) {
                            Vector row = new Vector();
                            row.add(rsLocal.getString("pt_name"));
                            row.add(rsLocal.getString("opd_no"));
                            row.add(rsLocal.getString("mobile"));
                            row.add(rsLocal.getString("address"));
                            dtm.addRow(row);
                        }
                    } catch (Exception ex) {
                        lb.printToLogFile("Exception at saveVoucher at save area master", ex);
                    } finally {
                        removeGlassPane();
                    }
                    return null;
                }
            };
            workerForjbtnGenerate.execute();
        }
    }//GEN-LAST:event_jtxtContactKeyPressed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        int row = jTable1.getSelectedRow();
        if (evt.getClickCount() == 2) {
            if (row != -1) {
                opd_no = jTable1.getValueAt(row, 1).toString();
                if (type == 0) {
                    this.dispose();
                    OPDAppointmentBook opdBook = new OPDAppointmentBook(opd_no);
                    HMSHome.addOnScreen(opdBook, "OPD Appointmsnt Book", 22);
                } else if (type == 1) {
                    this.dispose();
                    IPDRegistrationForm ipd = new IPDRegistrationForm(opd_no);
                    HMSHome.addOnScreen(ipd, "IPD Registration Book", 25);
                } else if (type == 2) {
                    this.dispose();
                    if(opd!= null){
                        opd.jtxtOPDNumber.setText(opd_no);
                        opd.setData();
                    } else{
                        vcd.jtxtOPDNumber.setText(opd_no);
                        vcd.setData();
                    }
                }
            }
        }
    }//GEN-LAST:event_jTable1MouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBillDateBtn;
    private javax.swing.JButton jBillDateBtn1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton jbtnClose;
    private javax.swing.JButton jbtnSearch;
    private javax.swing.JCheckBox jchkArea;
    private javax.swing.JCheckBox jchkCity;
    private javax.swing.JCheckBox jchkConsulatant;
    private javax.swing.JCheckBox jchkDate;
    private javax.swing.JCheckBox jchkName;
    private javax.swing.JCheckBox jchkRefBy;
    private javax.swing.JTextField jtxtArea;
    private javax.swing.JTextField jtxtCity;
    private javax.swing.JTextField jtxtConsAlias;
    private javax.swing.JTextField jtxtConsBy;
    private javax.swing.JTextField jtxtContact;
    private javax.swing.JTextField jtxtFromDate;
    private javax.swing.JTextField jtxtName;
    private javax.swing.JTextField jtxtOPDNumber;
    private javax.swing.JTextField jtxtRefAlias;
    private javax.swing.JTextField jtxtRefBy;
    private javax.swing.JTextField jtxtToDate;
    // End of variables declaration//GEN-END:variables
}
